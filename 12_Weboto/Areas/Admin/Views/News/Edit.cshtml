@model _12_Weboto.Models.News

@{
    ViewData["Title"] = "Sửa Tin Tức";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

<h2>Sửa Tin Tức</h2>

<form asp-action="Edit" method="post" enctype="multipart/form-data">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <input type="hidden" asp-for="Id" />

    <div class="form-group">
        <label asp-for="Title" class="control-label"></label>
        <input asp-for="Title" class="form-control" />
        <span asp-validation-for="Title" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Content" class="control-label">Nội dung:</label>
        <textarea asp-for="Content" class="form-control" id="contentEditor" rows="20" style="width: 100%;"></textarea>
        <span asp-validation-for="Content" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="CategoryId" class="control-label">Danh mục:</label>
        <select asp-for="CategoryId" class="form-control" asp-items="ViewBag.CategoryId">
            <option value="">Chọn danh mục</option>
        </select>
        <span asp-validation-for="CategoryId" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="CreatedBy" class="control-label">Người tạo:</label>
        <input asp-for="CreatedBy" class="form-control" value="@ViewBag.FullName" readonly />
        <span asp-validation-for="CreatedBy" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label class="control-label">Ảnh hiện tại</label>
        @if (Model.Images != null && Model.Images.Any())
        {
            <div class="row" id="existingImages">
                @foreach (var img in Model.Images)
                {
                    <div class="col-md-3 position-relative m-2">
                        <img src="@img.ImageUrl" class="img-thumbnail" style="max-width: 150px;" />
                    </div>
                }
            </div>
        }
        else
        {
            <p>Chưa có ảnh</p>
        }
    </div>

    <div>
        <label>Thêm ảnh mới</label>
        <input type="file" id="imageInput" name="Images" multiple class="form-control" />
    </div>

    <!-- Hiển thị ảnh đã chọn -->
    <div id="imagePreview" class="mt-3 d-flex flex-wrap"></div>

    <div class="form-group">
        <input type="submit" value="Lưu" class="btn btn-primary" />
        <a asp-action="Index" class="btn btn-secondary">Quay lại</a>
    </div>
</form>

@section Scripts {
    <!-- Thêm TinyMCE từ CDN -->
    <script src="https://cdn.tiny.cloud/1/cucl8wjphg9t5jdwqpfzpbeacqzywfgt9gzi2sns9v6vgcff/tinymce/6/tinymce.min.js" referrerpolicy="origin"></script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        // Khởi tạo TinyMCE
        tinymce.init({
            selector: '#contentEditor',
            height: 600,
            width: '100%',
            plugins: 'image paste lists advlist code',
            toolbar: 'undo redo | bold italic underline | customFontSize fontselect | alignleft aligncenter alignright | bullist numlist | image | removeformat',
            menubar: true,
            paste_data_images: true,
            setup: function (editor) {
                editor.ui.registry.addMenuButton('customFontSize', {
                    text: 'Fontsize',
                    fetch: function (callback) {
                        const items = [
                            { type: 'menuitem', text: '8pt', onAction: () => editor.execCommand('FontSize', false, '8pt') },
                            { type: 'menuitem', text: '10pt', onAction: () => editor.execCommand('FontSize', false, '10pt') },
                            { type: 'menuitem', text: '12pt', onAction: () => editor.execCommand('FontSize', false, '12pt') },
                            { type: 'menuitem', text: '14pt', onAction: () => editor.execCommand('FontSize', false, '14pt') },
                            { type: 'menuitem', text: '16pt', onAction: () => editor.execCommand('FontSize', false, '16pt') },
                            { type: 'menuitem', text: '18pt', onAction: () => editor.execCommand('FontSize', false, '18pt') },
                            { type: 'menuitem', text: '20pt', onAction: () => editor.execCommand('FontSize', false, '20pt') },
                        ];
                        callback(items);
                    }
                });

                editor.on('init', function () {
                    editor.getBody().style.fontSize = '16pt';
                });

                editor.on('ObjectResized', function (e) {
                    if (e.target.nodeName === 'IMG') {
                        var width = prompt('Nhập chiều rộng (px):', e.width);
                        var height = prompt('Nhập chiều cao (px):', e.height);
                        if (width && height) {
                            e.target.style.width = width + 'px';
                            e.target.style.height = height + 'px';
                        }
                    }
                });
            },
            images_upload_handler: function (blobInfo, success, failure) {
                var formData = new FormData();
                formData.append('file', blobInfo.blob(), blobInfo.filename());

                fetch('/Admin/News/UploadImage', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.location) {
                        success(data.location);
                    } else {
                        failure('Tải lên thất bại');
                    }
                })
                .catch(error => {
                    failure('Lỗi tải lên: ' + error);
                });
            }
        });

        // Xử lý preview ảnh upload riêng
        let selectedFiles = [];
        document.getElementById('imageInput').addEventListener('change', function(event) {
            let imagePreview = document.getElementById('imagePreview');
            let files = Array.from(event.target.files);

            files.forEach((file) => {
                if (!selectedFiles.some(f => f.name === file.name)) {
                    selectedFiles.push(file);
                }
            });

            updatePreview();
        });

        function updatePreview() {
            let imagePreview = document.getElementById('imagePreview');
            imagePreview.innerHTML = '';

            selectedFiles.forEach((file, index) => {
                let reader = new FileReader();
                reader.onload = function(e) {
                    let div = document.createElement('div');
                    div.className = 'position-relative m-2';

                    let img = document.createElement('img');
                    img.src = e.target.result;
                    img.className = 'img-thumbnail';
                    img.style.width = '150px';
                    img.style.height = '100px';

                    let removeBtn = document.createElement('button');
                    removeBtn.innerHTML = '×';
                    removeBtn.className = 'btn btn-danger btn-sm position-absolute top-0 end-0';
                    removeBtn.style.borderRadius = '50%';
                    removeBtn.style.padding = '2px 6px';

                    removeBtn.addEventListener('click', function() {
                        selectedFiles.splice(index, 1);
                        updatePreview();
                    });

                    div.appendChild(img);
                    div.appendChild(removeBtn);
                    imagePreview.appendChild(div);
                };
                reader.readAsDataURL(file);
            });

            updateFileInput();
        }

        function updateFileInput() {
            let dt = new DataTransfer();
            selectedFiles.forEach(file => dt.items.add(file));
            document.getElementById('imageInput').files = dt.files;
        }
    </script>
}